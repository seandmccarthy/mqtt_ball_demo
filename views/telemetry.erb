<html>
  <head>
<style>
#garden {
  position: relative;
  width : 500px;
  height: 500px;
  border: 5px solid #CCC;
  border-radius: 10px;
}

#ball {
  position: absolute;
  top   : 90px;
  left  : 90px;
  width : 20px;
  height: 20px;
  background: green;
  border-radius: 100%;
}
</style>
  <script src="mqttws31.js" type="text/javascript"></script>
  </head>
  <body>
    <div id="garden">
      <div id="ball"></div>
    </div>
    <div id="x-pos"></div>
    <div id="y-pos"></div>
  <script>
window.onerror = function(message, url, lineNumber) {
  //save error and send to server for example.
  alert(message + " " + lineNumber);
  return false;
};
var messageByteCount = 0;
var messageCount = 0;
var client = new Paho.MQTT.Client("<%= mqtt_host %>", Number(<%= mqtt_port %>), "/", "sender_client");
var ready = false;

// set callback handlers
client.onConnectionLost = onConnectionLost;

// connect the client
client.connect({onSuccess:onConnect, onFailure:onFailure});

// called when the client connects
function onConnect() {
  // Once a connection has been made, make a subscription and send a message.
  console.log("onConnect");
  //client.send("demo/1", "connected", 0, false);
  ready = true;
}

function onFailure(resp) {
  alert("failed to connect: "+resp.errorMessage);
}

// called when the client loses its connection
function onConnectionLost(responseObject) {
  if (responseObject.errorCode !== 0) {
    console.log("onConnectionLost:"+responseObject.errorMessage);
    alert("MQTT connection lost");
  }
}

var ball   = document.getElementById('ball');
var garden = document.getElementById('garden');
var output = document.getElementById('output');

var maxX = garden.clientWidth  - ball.clientWidth;
var maxY = garden.clientHeight - ball.clientHeight;

function sendMessage(event)
{
  client.send("demo/1", "foo", 0, false);
}

function handleOrientation(event) {
  var x = event.beta;  // In degree in the range [-180,180]
  var y = event.gamma; // In degree in the range [-90,90]

  // Because we don't want to have the device upside down
  // We constrain the x value to the range [-90,90]
  if (x >  90) { x =  90};
  if (x < -90) { x = -90};

  // To make computation easier we shift the range of
  // x and y to [0,180]
  x += 90;
  y += 90;
  document.getElementById("x-pos").textContent = x;
  document.getElementById("y-pos").textContent = y;

  if (ready) {
    client.send("demo/1", x+"|"+y, 0, false);
  }

  // 10 is half the size of the ball
  // It center the positioning point to the center of the ball
  ball.style.top  = (maxX*x/180 - 10) + "px";
  ball.style.left = (maxY*y/180 - 10) + "px";
}

//window.addEventListener('click', sendMessage);
window.addEventListener('deviceorientation', handleOrientation);
  </script>
  </body>
</html>
